<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="a311.college.mapper.school.SchoolMapper">

    <!-- 学校信息分页查询 -->
    <select id="schoolPageQuery" resultType="a311.college.entity.school.School">
        select
        school_id,
        school_head,
        school_name,
        school_province,
        school_address,
        rank_list
        from tb_school
        <where>
            <if test="schoolName != null and schoolName != ''">
                AND school_name LIKE CONCAT('%', #{schoolName}, '%')
            </if>
            <if test="province != null and province != ''">
                AND school_province = #{province}
            </if>
            <if test="rankList != null and !rankList.isEmpty()">
                AND (
                <foreach collection="rankList" item="item" separator="AND">
                    rank_list LIKE CONCAT('%', #{item}, '%')
                </foreach>
                )
            </if>
        </where>
        order by score desc, length(rank_list) desc
    </select>

    <!-- 学校专业分页查询 -->
    <select id="schoolMajorPageQuery" resultType="a311.college.entity.school.SchoolMajor">
        select sc.major_name, b.batch_name, sc.first_choice, sc.other_choice, sc.special, sc.min_score, sc.min_ranking
        FROM tb_school AS s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        WHERE s.school_id = #{schoolId}
    </select>

    <!-- 根据学校名搜索大学 -->
    <select id="selectSchoolBySchoolName" resultType="a311.college.entity.school.School">
        select s.school_id,
               s.school_head,
               s.school_name,
               s.school_address,
               s.rank_list
        from tb_school as s
        where school_name like concat('%', #{schoolName}, '%')
        order by score desc, length(rank_list) desc
    </select>

    <!-- 根据用户搜索内容搜索学校（搜索提示） -->
    <select id="searchSchool" resultType="a311.college.entity.school.School">
        select school_id, school_head, school_name, school_province, school_address, rank_list
        from tb_school
        <where>
            <if test="message != null and message != ''">
                school_name like concat('%', #{message}, '%')
            </if>
        </where>
        order by score desc
        limit 5
    </select>

    <!-- 查询某学校所有专业 -->
    <select id="selectAllSchoolMajor" resultType="a311.college.entity.school.SchoolMajor">
        select distinct sc.major_name,
                        sc.first_choice,
                        sc.other_choice,
                        sc.special,
                        sc.min_score,
                        sc.min_ranking
        FROM tb_school as s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        where s.school_id = #{schoolId}
          and p.province_name = #{province}
          and sc.first_choice = #{subject}
          and y.year = (SELECT MAX(year) FROM tb_year WHERE year &lt; YEAR(CURDATE()))
        order by sc.min_ranking
    </select>

    <!-- 获取某学校的历年分数线 -->
    <select id="selectScoreLineByYear" resultType="a311.college.vo.school.SchoolYearScoreVO">
        select distinct y.year,
                        b.batch_name,
                        sc.major_name,
                        sc.min_score,
                        sc.min_ranking,
                        sc.first_choice
        from tb_school as s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        where s.school_id = #{schoolId}
          and p.province_name = #{province}
          and y.year = #{year}
          and sc.first_choice = #{firstChoice}
        order by sc.min_score
        LIMIT 5
    </select>

    <!-- 获取某学校的专业分数线 -->
    <select id="selectMajorScoreLine" resultType="a311.college.vo.school.MajorYearScoreVO">
        select distinct sc.major_name,
                        sc.first_choice,
                        sc.other_choice,
                        sc.special,
                        b.batch_name,
                        sc.min_score,
                        sc.min_ranking
        from tb_school as s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        where s.school_id = #{schoolId}
          and p.province_name = #{province}
          and y.year = #{year}
          and sc.first_choice = #{firstChoice}
        order by sc.min_score desc
    </select>

    <!-- 查询学校评价 -->
    <select id="selectComment" resultType="a311.college.vo.school.CommentVO">
        select u.username, u.head, c.comment, c.time
        from tb_comment AS c,
             tb_user AS u
        where c.school_id = #{schoolId}
          and u.id = c.user_id
    </select>

    <!-- 查询该学校开设专业 -->
    <select id="selectMajor" resultType="a311.college.vo.major.MajorSimpleVO">
        SELECT category_name, major_name
        FROM (SELECT category_name,
                     major_name,
                     min_score,
                     min_ranking,
                     @rn_major := IF(@prev_major = major_name, @rn_major + 1, 1) AS rn_major,
                     @prev_major := major_name
              FROM (
                       -- 第一步：按学科类别分组，获取每个类别最高分专业
                       SELECT category_name,
                              major_name,
                              min_score,
                              min_ranking
                       FROM (SELECT c.category_name,
                                    sc.major_name,
                                    sc.min_score,
                                    sc.min_ranking,
                                    @rn := IF(@cat = c.category_name, @rn + 1, 1) AS rn,
                                    @cat := c.category_name
                             FROM tb_school AS s
                                      JOIN tb_province AS p ON s.school_id = p.school_id
                                      JOIN tb_year AS y ON p.province_id = y.province_id
                                      JOIN tb_category AS c ON y.year_id = c.year_id
                                      JOIN tb_batch AS b ON c.category_id = b.category_id
                                      JOIN tb_score AS sc ON b.batch_id = sc.batch_id
                                      CROSS JOIN (SELECT @cat := NULL, @rn := 0) AS vars
                             WHERE s.school_id = #{schoolId}
                             ORDER BY c.category_name, sc.min_score DESC, sc.min_ranking DESC) AS category_ranked
                       WHERE rn = 1) AS category_top
              -- 第二步：按专业名称重新排序，为同名专业保留最高分
              ORDER BY major_name, min_score DESC, min_ranking DESC) AS major_ranked
                 CROSS JOIN (SELECT @prev_major := NULL, @rn_major := 0) AS vars_major
        WHERE rn_major = 1 -- 每个专业只保留最高分记录
        ORDER BY min_score DESC, min_ranking DESC
        LIMIT 5;
    </select>

    <!-- 查询某学校最好的专业 -->
    <select id="selectBestMajor" resultType="a311.college.entity.school.SchoolMajor">
        select distinct sc.major_name,
                        sc.first_choice,
                        sc.other_choice,
                        sc.special,
                        sc.min_score,
                        sc.min_ranking
        from tb_school as s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        where s.school_id = #{schoolId}
          and p.province_name = #{provinceName}
        order by sc.min_score desc
        limit 3
    </select>

    <!-- 查询开设某专业的学校 -->
    <select id="selectMajorSchool" resultType="a311.college.entity.school.School">
        select distinct
            s.school_id,
            s.school_head,
            s.school_name,
            s.rank_list,
            s.school_address,
            s.score
        from tb_school as s
                 JOIN tb_province as p ON s.school_id = p.school_id
                 JOIN tb_year as y ON p.province_id = y.province_id
                 JOIN tb_category as c ON y.year_id = c.year_id
                 JOIN tb_batch as b ON c.category_id = b.category_id
                 JOIN tb_score as sc ON b.batch_id = sc.batch_id
        <where>
            <if test="majorName = null and majorName != ''">
                AND major_name = #{majorName}
            </if>
            <if test="province != null and province != ''">
                AND school_province = #{province}
            </if>
            <if test="rankList != null and !rankList.isEmpty()">
                AND (
                <foreach collection="rankList" item="item" separator="AND">
                    rank_list LIKE CONCAT('%', #{item}, '%')
                </foreach>
                )
            </if>
        </where>
        order by s.score desc
    </select>

</mapper>